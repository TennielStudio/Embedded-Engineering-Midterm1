
Midterm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  000003a8  0000043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001b4  008001b4  000004f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c85  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ac  00000000  00000000  00001215  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000414  00000000  00000000  000019c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000437  00000000  00000000  00001e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c5  00000000  00000000  000022bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002680  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3b       	cpi	r26, 0xB4	; 180
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 eb       	ldi	r26, 0xB4	; 180
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3b       	cpi	r26, 0xBA	; 186
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  9e:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
 
 
 
 
ISR(ADC_vect)
 {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	29 97       	sbiw	r28, 0x09	; 9
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	cd bf       	out	0x3d, r28	; 61
	 volatile unsigned int j;
	 volatile unsigned int lngth;
	char convertTemp[5];
	lngth = 5;
  d6:	85 e0       	ldi	r24, 0x05	; 5
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	9c 83       	std	Y+4, r25	; 0x04
  dc:	8b 83       	std	Y+3, r24	; 0x03
	j = 0;
  de:	1a 82       	std	Y+2, r1	; 0x02
  e0:	19 82       	std	Y+1, r1	; 0x01
	 
	ADCvalue = (ADCH << 1); //Shifts the value left to one place
  e2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e6:	88 0f       	add	r24, r24
  e8:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <ADCvalue>
	
	/*convert character to ASCII decimal, hence the 10*/
	itoa(ADCvalue, convertTemp, 10);
  ec:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <ADCvalue>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  f0:	4a e0       	ldi	r20, 0x0A	; 10
  f2:	be 01       	movw	r22, r28
  f4:	6b 5f       	subi	r22, 0xFB	; 251
  f6:	7f 4f       	sbci	r23, 0xFF	; 255
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 9d 01 	call	0x33a	; 0x33a <__itoa_ncheck>
	
	/*Store the converted temperature into ADCtemp one bit at a time*/
	while (j<5) 
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	9a 81       	ldd	r25, Y+2	; 0x02
 102:	05 97       	sbiw	r24, 0x05	; 5
 104:	b8 f4       	brcc	.+46     	; 0x134 <__vector_21+0x8e>
	{
		ADCtemp[j] = convertTemp[j];
 106:	e9 81       	ldd	r30, Y+1	; 0x01
 108:	fa 81       	ldd	r31, Y+2	; 0x02
 10a:	a9 81       	ldd	r26, Y+1	; 0x01
 10c:	ba 81       	ldd	r27, Y+2	; 0x02
 10e:	85 e0       	ldi	r24, 0x05	; 5
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	8c 0f       	add	r24, r28
 114:	9d 1f       	adc	r25, r29
 116:	a8 0f       	add	r26, r24
 118:	b9 1f       	adc	r27, r25
 11a:	8c 91       	ld	r24, X
 11c:	ec 54       	subi	r30, 0x4C	; 76
 11e:	fe 4f       	sbci	r31, 0xFE	; 254
 120:	80 83       	st	Z, r24
		j = j+1;
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	9a 81       	ldd	r25, Y+2	; 0x02
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	9a 83       	std	Y+2, r25	; 0x02
 12a:	89 83       	std	Y+1, r24	; 0x01
	
	/*convert character to ASCII decimal, hence the 10*/
	itoa(ADCvalue, convertTemp, 10);
	
	/*Store the converted temperature into ADCtemp one bit at a time*/
	while (j<5) 
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	9a 81       	ldd	r25, Y+2	; 0x02
 130:	05 97       	sbiw	r24, 0x05	; 5
 132:	48 f3       	brcs	.-46     	; 0x106 <__vector_21+0x60>
	{
		ADCtemp[j] = convertTemp[j];
		j = j+1;
	}
 }
 134:	29 96       	adiw	r28, 0x09	; 9
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	bf 91       	pop	r27
 14a:	af 91       	pop	r26
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	7f 91       	pop	r23
 152:	6f 91       	pop	r22
 154:	5f 91       	pop	r21
 156:	4f 91       	pop	r20
 158:	3f 91       	pop	r19
 15a:	2f 91       	pop	r18
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <send_AT>:




void send_AT(volatile unsigned char c[])
 {
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	00 d0       	rcall	.+0      	; 0x16c <send_AT+0x6>
 16c:	00 d0       	rcall	.+0      	; 0x16e <send_AT+0x8>
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	ac 01       	movw	r20, r24
	
	volatile unsigned int i=0;
 174:	1a 82       	std	Y+2, r1	; 0x02
 176:	19 82       	std	Y+1, r1	; 0x01
	volatile unsigned int variableLength;
	
	variableLength = 0; //initialize counter
 178:	1c 82       	std	Y+4, r1	; 0x04
 17a:	1b 82       	std	Y+3, r1	; 0x03
	
	while (c[variableLength] != 0x00) //while not at end of string
 17c:	eb 81       	ldd	r30, Y+3	; 0x03
 17e:	fc 81       	ldd	r31, Y+4	; 0x04
 180:	e8 0f       	add	r30, r24
 182:	f9 1f       	adc	r31, r25
 184:	80 81       	ld	r24, Z
 186:	88 23       	and	r24, r24
 188:	69 f0       	breq	.+26     	; 0x1a4 <send_AT+0x3e>
	{
		variableLength++; //increment counter to calculate until NULL
 18a:	2b 81       	ldd	r18, Y+3	; 0x03
 18c:	3c 81       	ldd	r19, Y+4	; 0x04
 18e:	2f 5f       	subi	r18, 0xFF	; 255
 190:	3f 4f       	sbci	r19, 0xFF	; 255
 192:	3c 83       	std	Y+4, r19	; 0x04
 194:	2b 83       	std	Y+3, r18	; 0x03
	volatile unsigned int i=0;
	volatile unsigned int variableLength;
	
	variableLength = 0; //initialize counter
	
	while (c[variableLength] != 0x00) //while not at end of string
 196:	eb 81       	ldd	r30, Y+3	; 0x03
 198:	fc 81       	ldd	r31, Y+4	; 0x04
 19a:	e4 0f       	add	r30, r20
 19c:	f5 1f       	adc	r31, r21
 19e:	80 81       	ld	r24, Z
 1a0:	81 11       	cpse	r24, r1
 1a2:	f3 cf       	rjmp	.-26     	; 0x18a <send_AT+0x24>
	{
		variableLength++; //increment counter to calculate until NULL
	}
	
	while (i<variableLength)
 1a4:	29 81       	ldd	r18, Y+1	; 0x01
 1a6:	3a 81       	ldd	r19, Y+2	; 0x02
 1a8:	8b 81       	ldd	r24, Y+3	; 0x03
 1aa:	9c 81       	ldd	r25, Y+4	; 0x04
 1ac:	28 17       	cp	r18, r24
 1ae:	39 07       	cpc	r19, r25
 1b0:	d8 f4       	brcc	.+54     	; 0x1e8 <send_AT+0x82>
	{
		while(!(UCSR0A & (1 << UDRE0))); //If UDRE0 is 1, buffer is empty & ready to be written to
 1b2:	e0 ec       	ldi	r30, 0xC0	; 192
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = c[i];
 1b6:	66 ec       	ldi	r22, 0xC6	; 198
 1b8:	70 e0       	ldi	r23, 0x00	; 0
		variableLength++; //increment counter to calculate until NULL
	}
	
	while (i<variableLength)
	{
		while(!(UCSR0A & (1 << UDRE0))); //If UDRE0 is 1, buffer is empty & ready to be written to
 1ba:	90 81       	ld	r25, Z
 1bc:	95 ff       	sbrs	r25, 5
 1be:	fd cf       	rjmp	.-6      	; 0x1ba <send_AT+0x54>
		UDR0 = c[i];
 1c0:	a9 81       	ldd	r26, Y+1	; 0x01
 1c2:	ba 81       	ldd	r27, Y+2	; 0x02
 1c4:	a4 0f       	add	r26, r20
 1c6:	b5 1f       	adc	r27, r21
 1c8:	8c 91       	ld	r24, X
 1ca:	db 01       	movw	r26, r22
 1cc:	8c 93       	st	X, r24
		i = i+1;
 1ce:	29 81       	ldd	r18, Y+1	; 0x01
 1d0:	3a 81       	ldd	r19, Y+2	; 0x02
 1d2:	2f 5f       	subi	r18, 0xFF	; 255
 1d4:	3f 4f       	sbci	r19, 0xFF	; 255
 1d6:	3a 83       	std	Y+2, r19	; 0x02
 1d8:	29 83       	std	Y+1, r18	; 0x01
	while (c[variableLength] != 0x00) //while not at end of string
	{
		variableLength++; //increment counter to calculate until NULL
	}
	
	while (i<variableLength)
 1da:	29 81       	ldd	r18, Y+1	; 0x01
 1dc:	3a 81       	ldd	r19, Y+2	; 0x02
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	9c 81       	ldd	r25, Y+4	; 0x04
 1e2:	28 17       	cp	r18, r24
 1e4:	39 07       	cpc	r19, r25
 1e6:	48 f3       	brcs	.-46     	; 0x1ba <send_AT+0x54>
		while(!(UCSR0A & (1 << UDRE0))); //If UDRE0 is 1, buffer is empty & ready to be written to
		UDR0 = c[i];
		i = i+1;
	}

}
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <main>:
	 
	 //---------------------------------------------------------------
	 // INITIALIZE ADC VALUES
	 //---------------------------------------------------------------

	 ADMUX = 0; // use ADC0
 1f6:	ec e7       	ldi	r30, 0x7C	; 124
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	10 82       	st	Z, r1
	 ADMUX |= (1 << REFS0); // use AVcc as the reference
 1fc:	80 81       	ld	r24, Z
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	80 83       	st	Z, r24
	 ADMUX |= (1 << ADLAR); // Right adjust for 8 bit resolution
 202:	80 81       	ld	r24, Z
 204:	80 62       	ori	r24, 0x20	; 32
 206:	80 83       	st	Z, r24
	 ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 128 prescale for 16Mhz
 208:	ea e7       	ldi	r30, 0x7A	; 122
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	87 60       	ori	r24, 0x07	; 7
 210:	80 83       	st	Z, r24
	 ADCSRA |= (1 << ADATE); // Set ADC Auto Trigger Enable
 212:	80 81       	ld	r24, Z
 214:	80 62       	ori	r24, 0x20	; 32
 216:	80 83       	st	Z, r24
	 ADCSRB = 0; // 0 for free running mode
 218:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	 ADCSRA |= (1 << ADEN); // Enable the ADC
 21c:	80 81       	ld	r24, Z
 21e:	80 68       	ori	r24, 0x80	; 128
 220:	80 83       	st	Z, r24
	 ADCSRA |= (1 << ADIE); // Enable Interrupts
 222:	80 81       	ld	r24, Z
 224:	88 60       	ori	r24, 0x08	; 8
 226:	80 83       	st	Z, r24
	 ADCSRA |= (1 << ADSC); // Start the ADC conversion
 228:	80 81       	ld	r24, Z
 22a:	80 64       	ori	r24, 0x40	; 64
 22c:	80 83       	st	Z, r24
	 //---------------------------------------------------------------
	 // INITIALIZE UART VALUES
	 //---------------------------------------------------------------
	 
	 /*Set baud rate */
	 UBRR0H = ((MYUBRR) >> 8); //Shift to store the upper 8 bits
 22e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	 UBRR0L = MYUBRR; //Store lower bits
 232:	80 e1       	ldi	r24, 0x10	; 16
 234:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

   	UCSR0A |= (1 << U2X0); //Double the USART transmission speed
 238:	e0 ec       	ldi	r30, 0xC0	; 192
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	82 60       	ori	r24, 0x02	; 2
 240:	80 83       	st	Z, r24
	 UCSR0B |= (1 << TXEN0); // Enable transmitter
 242:	e1 ec       	ldi	r30, 0xC1	; 193
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	88 60       	ori	r24, 0x08	; 8
 24a:	80 83       	st	Z, r24
	 UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); // Set frame: 8data, 1 stop, no parity bit
 24c:	e2 ec       	ldi	r30, 0xC2	; 194
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	86 60       	ori	r24, 0x06	; 6
 254:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	2f e3       	ldi	r18, 0x3F	; 63
 258:	8d e0       	ldi	r24, 0x0D	; 13
 25a:	93 e0       	ldi	r25, 0x03	; 3
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0x66>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x70>
 266:	00 00       	nop
	 //---------------------------------------------------------------
	 // BEGIN USE OF AT COMMANDS
	 //---------------------------------------------------------------
	 
	 _delay_ms(1000); //Test AT
	 send_AT(AT);
 268:	8e ea       	ldi	r24, 0xAE	; 174
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
 270:	2f e3       	ldi	r18, 0x3F	; 63
 272:	8d e0       	ldi	r24, 0x0D	; 13
 274:	93 e0       	ldi	r25, 0x03	; 3
 276:	21 50       	subi	r18, 0x01	; 1
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <main+0x80>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x8a>
 280:	00 00       	nop
	 
	_delay_ms(1000); //Display firmware
	 send_AT(FIRM);
 282:	85 ea       	ldi	r24, 0xA5	; 165
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
 28a:	2f e3       	ldi	r18, 0x3F	; 63
 28c:	8d e0       	ldi	r24, 0x0D	; 13
 28e:	93 e0       	ldi	r25, 0x03	; 3
 290:	21 50       	subi	r18, 0x01	; 1
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <main+0x9a>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0xa4>
 29a:	00 00       	nop
	 
	 _delay_ms(1000); //Set to wifi mode
	 send_AT(CWMODE);
 29c:	87 e9       	ldi	r24, 0x97	; 151
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
 2a4:	2f e3       	ldi	r18, 0x3F	; 63
 2a6:	8d e0       	ldi	r24, 0x0D	; 13
 2a8:	93 e0       	ldi	r25, 0x03	; 3
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <main+0xb4>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0xbe>
 2b4:	00 00       	nop
	  
	 _delay_ms(1000); //connect to home wifi
	 send_AT(WEEFEE);
 2b6:	85 e7       	ldi	r24, 0x75	; 117
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
 2be:	2f e7       	ldi	r18, 0x7F	; 127
 2c0:	8a e1       	ldi	r24, 0x1A	; 26
 2c2:	96 e0       	ldi	r25, 0x06	; 6
 2c4:	21 50       	subi	r18, 0x01	; 1
 2c6:	80 40       	sbci	r24, 0x00	; 0
 2c8:	90 40       	sbci	r25, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <main+0xce>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <main+0xd8>
 2ce:	00 00       	nop
	 
	 _delay_ms(2000); //enable the single connection
	 send_AT(ENABLE);
 2d0:	87 e6       	ldi	r24, 0x67	; 103
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
	 	  

	  sei();	//Enable ADC interrupt vector
 2d8:	78 94       	sei
 2da:	2f e3       	ldi	r18, 0x3F	; 63
 2dc:	8d e0       	ldi	r24, 0x0D	; 13
 2de:	93 e0       	ldi	r25, 0x03	; 3
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	80 40       	sbci	r24, 0x00	; 0
 2e4:	90 40       	sbci	r25, 0x00	; 0
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <main+0xea>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <main+0xf4>
 2ea:	00 00       	nop
		//---------------------------------------------------------------
		// AT COMMANDS TO REPEAT FOREVER
		//---------------------------------------------------------------	 
		 
		_delay_ms(1000); //Begin wifi connection
		 send_AT(CIPSTART);
 2ec:	8e e3       	ldi	r24, 0x3E	; 62
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
 2f4:	2f e3       	ldi	r18, 0x3F	; 63
 2f6:	8d e0       	ldi	r24, 0x0D	; 13
 2f8:	93 e0       	ldi	r25, 0x03	; 3
 2fa:	21 50       	subi	r18, 0x01	; 1
 2fc:	80 40       	sbci	r24, 0x00	; 0
 2fe:	90 40       	sbci	r25, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x104>
 302:	00 c0       	rjmp	.+0      	; 0x304 <main+0x10e>
 304:	00 00       	nop

		 _delay_ms(1000); //Length
		 send_AT(CIPSEND);
 306:	8e e2       	ldi	r24, 0x2E	; 46
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
 30e:	2f e3       	ldi	r18, 0x3F	; 63
 310:	8d e0       	ldi	r24, 0x0D	; 13
 312:	93 e0       	ldi	r25, 0x03	; 3
 314:	21 50       	subi	r18, 0x01	; 1
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	90 40       	sbci	r25, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <main+0x11e>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <main+0x128>
 31e:	00 00       	nop

		 _delay_ms(1000); 
		 send_AT(SEND_DATA); //Uses the API key to send the data
 320:	85 e0       	ldi	r24, 0x05	; 5
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
		 
		 send_AT(ADCtemp); //Sends the temperature data
 328:	84 eb       	ldi	r24, 0xB4	; 180
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
		 
		 send_AT(PAUSE); //A break in the data display
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 b3 00 	call	0x166	; 0x166 <send_AT>
 338:	d0 cf       	rjmp	.-96     	; 0x2da <main+0xe4>

0000033a <__itoa_ncheck>:
 33a:	bb 27       	eor	r27, r27
 33c:	4a 30       	cpi	r20, 0x0A	; 10
 33e:	31 f4       	brne	.+12     	; 0x34c <__itoa_ncheck+0x12>
 340:	99 23       	and	r25, r25
 342:	22 f4       	brpl	.+8      	; 0x34c <__itoa_ncheck+0x12>
 344:	bd e2       	ldi	r27, 0x2D	; 45
 346:	90 95       	com	r25
 348:	81 95       	neg	r24
 34a:	9f 4f       	sbci	r25, 0xFF	; 255
 34c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__utoa_common>

00000350 <__utoa_ncheck>:
 350:	bb 27       	eor	r27, r27

00000352 <__utoa_common>:
 352:	fb 01       	movw	r30, r22
 354:	55 27       	eor	r21, r21
 356:	aa 27       	eor	r26, r26
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	aa 1f       	adc	r26, r26
 35e:	a4 17       	cp	r26, r20
 360:	10 f0       	brcs	.+4      	; 0x366 <__utoa_common+0x14>
 362:	a4 1b       	sub	r26, r20
 364:	83 95       	inc	r24
 366:	50 51       	subi	r21, 0x10	; 16
 368:	b9 f7       	brne	.-18     	; 0x358 <__utoa_common+0x6>
 36a:	a0 5d       	subi	r26, 0xD0	; 208
 36c:	aa 33       	cpi	r26, 0x3A	; 58
 36e:	08 f0       	brcs	.+2      	; 0x372 <__utoa_common+0x20>
 370:	a9 5d       	subi	r26, 0xD9	; 217
 372:	a1 93       	st	Z+, r26
 374:	00 97       	sbiw	r24, 0x00	; 0
 376:	79 f7       	brne	.-34     	; 0x356 <__utoa_common+0x4>
 378:	b1 11       	cpse	r27, r1
 37a:	b1 93       	st	Z+, r27
 37c:	11 92       	st	Z+, r1
 37e:	cb 01       	movw	r24, r22
 380:	0c 94 c2 01 	jmp	0x384	; 0x384 <strrev>

00000384 <strrev>:
 384:	dc 01       	movw	r26, r24
 386:	fc 01       	movw	r30, r24
 388:	67 2f       	mov	r22, r23
 38a:	71 91       	ld	r23, Z+
 38c:	77 23       	and	r23, r23
 38e:	e1 f7       	brne	.-8      	; 0x388 <strrev+0x4>
 390:	32 97       	sbiw	r30, 0x02	; 2
 392:	04 c0       	rjmp	.+8      	; 0x39c <strrev+0x18>
 394:	7c 91       	ld	r23, X
 396:	6d 93       	st	X+, r22
 398:	70 83       	st	Z, r23
 39a:	62 91       	ld	r22, -Z
 39c:	ae 17       	cp	r26, r30
 39e:	bf 07       	cpc	r27, r31
 3a0:	c8 f3       	brcs	.-14     	; 0x394 <strrev+0x10>
 3a2:	08 95       	ret

000003a4 <_exit>:
 3a4:	f8 94       	cli

000003a6 <__stop_program>:
 3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <__stop_program>
